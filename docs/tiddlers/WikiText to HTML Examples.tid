created: 20211020005924040
creator: Nils
modified: 20211101040628065
modifier: Nils
tags: doc
title: WikiText to HTML Examples
type: text/vnd.tiddlywiki

Here we compare [[HTML|https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics]] created in the TiddlyWiki master [[branch|https://en.wikipedia.org/wiki/Branching_(version_control)]] and in the [[refined-html-syntax|https://github.com/Jermolene/TiddlyWiki5/pull/6156]] branch.

<div class="examples">

<table>
<tr>
<td class="example">
//The [[WikiText|https://tiddlywiki.com/#WikiText]] input is shown here//
</td>
<td class="example">
//The resulting HTML output in the ''master branch'' is shown here//
</td>
<td class="example">
//The resulting HTML output in the ''"unified-html-syntax" branch'' is shown here//
</td>
</tr>
</table>





!! Current syntaxes

Currently we have two syntaxes in WikiText, to let the user control, where [[automatic paragraph wrapping|What Is Automatic Paragraph Wrapping?]] happens:

//Wrap Parent syntax//. Zero or one line break after the opening tag in the WikiText will wrap the parent, but not the child, in a paragraph in the HTML output:

<<one-example
"<parent>child</parent>"
"<p><parent>child</parent></p>"
>>

//Wrap Child syntax//. Two or more line breaks after the opening tag in the WikiText will wrap the child, but not the parent, in a paragraph in the HTML Output:

<<one-example

"<parent>

child

</parent>"

"<parent><p>child</p></parent>"

>>





!! The problem

... is, that these syntaxes alone can not generate html, where //nothing// gets wrapped in paragraphs. For example, this HTML output can currently not be generated in WikiText:

<div class="output">

```
<parent>child</parent>
```

</div>





!! Suggested syntax changes

Therefore, my pull request suggests the following syntax changes:


!!! Partially modified old syntaxes

The Wrap Child syntax from above stays unchanged.

The Wrap Parent syntax gets modified, so that it requires exactly zero line breaks after the opening tag (previously zero or one).


!!! New //No Wrap// syntax

We add a //No Wrap// syntax which gets triggered when we add exactly one line break after the opening tag (which previously triggered the Wrap Parent syntax). This allows us to create HTML output without any paragraph wrapping:

<<one-example
"<parent>
child
</parent>"
"<p><parent>
child
</parent></p>"
>>

These three syntaxes intuitively document where the paragraph will be added in the HTML output.

* ''No linebreak'' after the opening tag: The ''parent gets wrapped''.
* ''One linebreak'' after the opening tag: ''Nothing gets wrapped''.
* ''Two linebreaks'' after the opening tag: The ''child gets wrapped''.


!!! New syntax for an escaped linebreak

Further, we add a syntax for an //escaped line break//:

<<one-example
"<parent>\
child
</parent>"
"<p><parent>\
child
</parent></p>"
>>

It is syntactical sugar; It allows a pretty formatting of the html in the WikiText, while still wrapping the outermost element in a paragraph in the HTML output.


!!! New handling of self-closing and void elements

Another syntax change is, that //self-closing// and //void// elements (more infos below) do not get wrapped in paragraphs any more in the HTML output. I document later in the text how we can achieve wrapping in these cases.


!!! Test It

The syntaxes are active in this wiki and you can play around with them by creating a new Tiddler (The "plus" button on the right). Enable the HTML preview (click the "eye" icon in the edit mode, and choose "raw HTML" from the drop-down button right to it), to see which HTML output you create with your [[WikiText|https://tiddlywiki.com/#WikiText]] input.





!! Detailed examples

The following examples partially reflect //editions/test/tiddlers/tests/test-wikitext-parser.js// in the TiddlyWiki codebase -- I originally compiled this list from the tests I added there in my branch.


!!! It should parse elements

<<one-example

"<button>
<strong>Hi!</strong>
</button>"

"<p><button>
<strong>Hi!</strong>
</button></p>"

>>


!!! It should add missing closing tags at the end of input

<<one-example

"<section>
<article>
<div>
<span>
<strong>Hi!"

"<p><section>
<article>
<div>
<span>
<strong>Hi!</strong></span></div></article></section></p>"
>>

//Which leads to the next example confusing me. To improve the debugging experience, I would like when after a missing tag all remaining html tags in the WikiText are parsed as [[HTML-escaped|https://stackoverflow.com/a/43738178]] raw text. But this is the topic of another pull request.//


!!! It should otherwise indicate an invalid html structure, by partially parsing tags as raw text

<<one-example

"<button>
<strong>Hi!</strong>
</div>"

"<p><button>
<strong>Hi!</strong>
&lt;/div&gt;</button></p>"

>>


!!! It should parse self-closing elements

<<one-example

"<div/>"

"<p><div></div></p>"

>>


!!! It should parse void elements

<<one-example

"<img>"

"<p><img></p>"

>>


!!! It should automatically wrap in paragraphs

<<one-example

"paragraph

another paragraph"

"<p>paragraph</p><p>another paragraph</p>"

>>


!!! It should parse block elements

<<one-example

"! Heading

* list"

"""<h1 class="">Heading</h1><ul><li>list</li></ul>"""

>>


!!! It should parse inline elements

<<one-example

"//italic//, ''bold'', __underlined__"

"<p><em>italic</em>, <strong>bold</strong>, <u>underlined</u></p>"

>>


!!! It should use block parsers in block contexts and inline parsers in inline contexts

<<one-example

"<inline>inline</inline>

<inline>\
inline
</inline>

<block>
inline
</block>

<block>

block

</block>"

"<p><inline>inline</inline></p><p><inline>\
inline
</inline></p><p><block>
inline
</block></p><block><p>block</p></block>"

>>

Here,

* //block// means: When viewed in the browser, it forms a block, which is vertically separated from its siblings by "empty lines".
* //inline// means: When viewed in a browser, it and its siblings and children are together in a horizontal line, which wraps around.
* //block text// means: Inline text which, together with other inline elements, is wrapped in a block building paragraph.
* //block element// means: it is block building itself, it does not need to (and should not) get wrapped in a paragraph.

!!! It should wrap an element in a paragraph and parse the children in inline mode, when there is no newline after the opening tag

<<one-example

"<span>! Not a heading</span>"

"<p><span>! Not a heading</span></p>"

>>


!!! It should also do so, when an escaped line break exists after the opening tag

An //escaped line break// is a backslash (`\`) followed by a newline. Both the backslash and the newline are thrown away.

<table>

<<example

"<span>\
...</span>"

"<p><span>\
...</span></p>"

>>

<<example

"<span>...</span>"

"<p><span>...</span></p>"

>>

</table>

The escaped line break will //only// be removed, when it follows //directly// after the opening tag. In all other locations it stays in the source, and does not affect in which mode the element is parsed (in the last example the span stays unwrapped because of the newline after the opening tag, not because of the `\`).

<table>

<<example

"<span>\</span>"

"<p><span>\</span></p>"

>>

<<example

"<span>\ </span>"

"<p><span>\ </span></p>"

>>

<<example

"<span> \</span>"

"<p><span> \</span></p>"

>>

<<example

"<span> \
</span>"

"<p><span> \
</span></p>"

>>

<<example

"<span>
\
</span>"

"<p><span>
\
</span></p>"

>>

</table>

The escaped line break is helpful for a pretty WikiText code layout.

<<one-example

"<pretty>\
<wikitext-layout>
<but-still>
wrapped in a p
</but-still>
</wikitext-layout>
</pretty>"

"<p><pretty>\
<wikitext-layout>
<but-still>
wrapped in a p
</but-still>
</wikitext-layout>
</pretty></p>"

>>

Without the linebreak-escaper, in order to wrap the outermost element in a paragraph, we would have to write

<<one-example

"<not-so-pretty><wikitext-layout>
<to-be>
wrapped in a p
</to-be>
</wikitext-layout>
</not-so-pretty>"

"<p><not-so-pretty><wikitext-layout>
<to-be>
wrapped in a p
</to-be>
</wikitext-layout>
</not-so-pretty></p>"

>>


!!! It should not wrap an element in a paragraph and parse the children in inline mode, when there is exactly one newline after the opening tag

<<one-example

"<div>
! Not a heading
</div>"

"<p><div>
! Not a heading
</div></p>"

>>


!!! It should not wrap an element in a paragraph and parse the children in block mode, when there are two or more newlines after the opening tag

<table>

<<example

"<div>

! I am a heading

</div>"

"""<div><h1 class="">I am a heading</h1></div>"""

>>

<<example

"<div>

...

</div>"

"<div><p>...</p></div>"

>>

<<example

"<div>




...




</div>"

"<div><p>...</p></div>"

>>

</table>


!!! It should trim away newlines from the start of pre and code elements, but keep indents and whitespace before and between text

So that these preformatted elements do not have empty lines at their start when viewed in the browser.

<table>

<<example

"<pre>
my code</pre>"

"<p><pre>
my code</pre></p>"

>>

<<example

"<pre>
    my indented code</pre>"

"<p><pre>
    my indented code</pre></p>"

>>

<<example

"""<pre>
       my

   //<span style="color:blue;">blue italic</span>//

indented       code
</pre>"""

"""<p><pre>
       my

   <em><span style="color:blue;">blue italic</span></em>

indented       code
</pre></p>"""

>>

<<example

"<code>my code wrapped in a p</code>"

"<p><code>my code wrapped in a p</code></p>"

>>

<<example

"<code>
my code</code>"

"<p><code>
my code</code></p>"

>>

<<example

"<code>
   sunset   at   the   beach   </code>"

"<p><code>
   sunset   at   the   beach   </code></p>"

>>

</table>


!!! It should not wrap //self-closing// or //void// elements in a paragraph, when they stand alone in a line

<table>

<<example

"<button/>"

"<p><button></button></p>"

>>

<<example

"<img>"

"<p><img></p>"

>>

</table>

To have paragraph wrapping, add the closing tag ...

<<one-example

"<button></button>"

"<p><button></button></p>"

>>

... or append more inline content ...

<<one-example

"<button/> Hi"

"<p><button></button> Hi</p>"

>>

... or explicitly wrap in a paragraph.

<<one-example

"<p>
<img>
</p>"

"<p><p>
<img>
</p></p>"

>>


!!! It should handle the end of input as if it was a line break, because editors or users may accidentally add or trim those

<table>

<<example

"<img>"

"<p><img></p>"

>>

<<example

"<img>

"

"<img>"

>>

<<example

"<button/>"

"<p><button></button></p>"

>>

<<example

"<button/>

"

"<button></button>"

>>

</table>

Otherwise, the last image in this example would be wrapped in a paragraph.

<<one-example

"<img>

<img>

<img>"

"<img><img><p><img></p>"

>>

but not in this example

<<one-example

"<img>

<img>

<img>

"

"<img><img><img>"

>>

This rule also applies to end of input inside macro definitions.

<table>

<<example

"\define foo()
<img>
\end

<<foo>>"

"<p><img></p>"

>>

<<example

"\define bar()
<img>

\end

<<bar>>"

"<img>"

>>

</table>

It also makes HTML line breaks (//br//'s) behave more intuitive, see below examples.


!!! It should parse HTML line breaks

These are valid ways to write an HTML line break.

<table>

<<example

"<br>"

"<p><br></p>"

>>

<<example

"<br/>"

"<p><br></p>"

>>

</table>

These are not.

<table>

<<example

"<br></br>"

"<p><br>&lt;/br&gt;</p>"

>>

<<example

"<br\>"

"<p>&lt;br\&gt;</p>"

>>

<<example

"</br>"

"<p>&lt;/br&gt;</p>"

>>

</table>

</div>
